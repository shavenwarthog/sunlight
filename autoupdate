#!/usr/bin/env python

'''
autoupdate -- scan project trees. When a Python file is modified, regenerate TAGS file

autoupdate <directory|file> ...


Example:
	autoupdate ~/src/*/setup.py

'''

import logging, os, re, sys
from itertools import ifilter
from pyinotify import WatchManager, Notifier, ProcessEvent
from pyinotify import IN_CLOSE_WRITE # pylint: disable-msg=E0611

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s %(message)s',
    # filename='/tmp/update-tags.log',
    # filemode='a'
    )

def iter_parentdirs(path):
    parts = path.split('/')
    dirs = ( '/'.join(parts[:-num]) for num in range(1, len(parts)-1) )
    return ifilter(os.path.isdir, dirs)

def rebuild(path):
    logging.debug(path)
    for makepath,dirpath in ( (os.path.join(dirpath, 'Makefile'), dirpath) 
                              for dirpath in iter_parentdirs(path) ):
        if (os.path.isfile(makepath) and 'inotify' in open(makepath).read()):
            cmd = 'make -C %s inotify' % dirpath
            status = os.system(cmd)
            if not status:
                logging.info(cmd)
            else:
                logging.error('%s => %d' % (cmd, status))
            return

def changed_cb(event):
    if os.path.splitext(event.pathname)[-1] != '.py':
        return
    if re.search('[0-9]{4,}', event.pathname): # Flynote tempfile
        return
    rebuild(event.pathname)

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

def Monitor(pathlist):
    class PClose(ProcessEvent):
        def process_IN_CLOSE(self, event):
            changed_cb(event)

    wm = WatchManager() 
    notifier = Notifier(wm, PClose())

    exlist = ifilter(os.path.exists, pathlist)
    dirlist = ( path if os.path.isdir(path) else os.path.dirname(path)
                for path in exlist )
    logging.info('watching: %s' % ' '.join(dirlist))

    [ wm.add_watch(dirpath, IN_CLOSE_WRITE) for dirpath in dirlist ]
    try:
        while 1:
            notifier.process_events() 
            if notifier.check_events():
                notifier.read_events()
    except KeyboardInterrupt:
        notifier.stop()
        return


def main(argv):
    if len(argv) < 2:
        print >>sys.stderr, 'usage: %s <directory>...' % sys.argv[0]
        sys.exit(1)
    else:
        Monitor(argv[1:])


if __name__ == '__main__':
    main(sys.argv)


